import numpy as np
import healpy as hp
import configparser
import argparse
import pymaster as nmt
import os
from ispice import *


"""

This code estimates E and B power spectra using PolSpice (no EB purification, but should be fine is B is not << E).

"""

########################################################################################################################

print('Reading in basic parameters ...')

parser = argparse.ArgumentParser(description='Code for estimating pseudo-Cl given two sky maps with uncorrelated '
                                             'noise.')
parser.add_argument('param_file', help='Main parameters file.')

Config = configparser.ConfigParser()
Config.read(parser.parse_args().param_file)

input_map1 = Config.get('Cl Estimation Params', 'input_map1')
input_map2 = Config.get('Cl Estimation Params', 'input_map2')
input_cov1 = Config.get('Cl Estimation Params', 'input_cov1')
input_cov2 = Config.get('Cl Estimation Params', 'input_cov1')
use_noise_model1 = Config.getboolean('Cl Estimation Params', 'use_noise_model1')
use_noise_model2 = Config.getboolean('Cl Estimation Params', 'use_noise_model2')
nl_param_file1 = Config.get('Cl Estimation Params', 'nl_param_file1')
nl_param_file2 = Config.get('Cl Estimation Params', 'nl_param_file2')
hits_map1 = Config.get('Cl Estimation Params', 'hits_map1')
hits_map2 = Config.get('Cl Estimation Params', 'hits_map2')
diffuse_map1 = Config.get('Cl Estimation Params', 'diffuse_map1')
diffuse_map2 = Config.get('Cl Estimation Params', 'diffuse_map2')

mask_file = Config.get('Cl Estimation Params', 'mask_file')
beam1_file = Config.get('Cl Estimation Params', 'beam1_file')
beam2_file = Config.get('Cl Estimation Params', 'beam2_file')
fwhm1 = Config.getfloat('Cl Estimation Params', 'fwhm1')
fwhm2 =	Config.getfloat('Cl Estimation Params', 'fwhm2')

nside = Config.getint('Cl Estimation Params', 'nside')
lmax = Config.getint('Cl Estimation Params', 'lmax')
custom_bpws = Config.getboolean('Cl Estimation Params', 'custom_bpws')
bpws_file = Config.get('Cl Estimation Params', 'bpws_file')
nlb = Config.getint('Cl Estimation Params', 'nlb')
apodize_scale = Config.getfloat('Cl Estimation Params', 'apodize_scale')
apodize_type = Config.getint('Cl Estimation Params', 'apodize_type')
theta_max = Config.getfloat('Cl Estimation Params', 'theta_max')
subav = Config.get('Cl Estimation Params', 'subav')
subdipole = Config.get('Cl Estimation Params', 'subdipole')
num_monte_carlo = Config.getint('Cl Estimation Params', 'num_monte_carlo')

leff_out = Config.get('Cl Estimation Params', 'leff_out')
cl_mc_mean_out = Config.get('Cl Estimation Params', 'cl_mc_mean_out')
cl_mc_std_out = Config.get('Cl Estimation Params', 'cl_mc_std_out')
cl_mc_cov_EE_EE_out = Config.get('Cl Estimation Params', 'cl_mc_cov_EE_EE_out')
cl_mc_cov_BB_BB_out = Config.get('Cl Estimation Params', 'cl_mc_cov_BB_BB_out')
cl_mc_cov_EB_EB_out = Config.get('Cl Estimation Params', 'cl_mc_cov_EB_EB_out')

########################################################################################################################

print('Reading in the Q/U maps, associated covariance maps, mask, and beam file (spherical harmonic transform) ...')
# May not need all this!

Imap1, Qmap1, Umap1 = hp.read_map(input_map1, field=(0,1,2)) 
Imap2, Qmap2, Umap2 = hp.read_map(input_map2, field=(0,1,2)) 

Icov1, Qcov1, Ucov1 = hp.read_map(input_cov1, field=(0,1,2)) 
Icov2, Qcov2, Ucov2 = hp.read_map(input_cov2, field=(0,1,2))

mask = hp.read_map(mask_file)
beam1 = np.loadtxt(beam1_file)
beam2 = np.loadtxt(beam2_file)

Imap1[mask == 0] = 0
Qmap1[mask == 0] = 0
Umap1[mask == 0] = 0
Imap2[mask == 0] = 0
Qmap2[mask == 0] = 0
Umap2[mask == 0] = 0

########################################################################################################################

print('Estimating pure E and B pseudo-Cls using PolSpice ...')

# Apodize the mask. Key parameters are the apodization scale and type. See the NaMaster docs for details.
ell = np.arange(3 * nside, dtype='int32')

# Generate the ell binning scheme.
if custom_bpws:
    bpws = np.loadtxt('bpws_file', usecols=0)
    weights = np.loadtxt('bpws_file', usecols=1)
    b = nmt.NmtBin(nside, bpws=bpws, ells=ell, weights=weights)
    leff = b.get_effective_ells()
elif not custom_bpws:
    b = nmt.NmtBin(nside, nlb=nlb, lmax=lmax)
    leff = b.get_effective_ells()

# Now we're ready to run over our Monte Carlo simulations.
# Here we estimate the mean Cl, the standard deviation on these, and the full covariance matrix between bandpowers.
snl_BB_power = []
snl_EE_power = []
snl_EB_power = []

# Model noise power spectra - only used if use_noise_model{1/2} is True.
nl_params1 = np.loadtxt(nl_param_file1)
nl_params2 = np.loadtxt(nl_param_file2)
nlE1 = nl_params1[2] / ell + nl_params1[3]
nlB1 = nl_params1[4] / ell + nl_params1[5]
nlE2 = nl_params2[2] / ell + nl_params2[3]
nlB2 = nl_params2[4] / ell + nl_params2[5]
nlE1[0:2] = 0
nlB1[0:2] = 0
nlE2[0:2] = 0
nlB2[0:2] = 0
nl1 = (nlE1, nlE1, nlB1, np.zeros(len(nlB1)))
nl2 = (nlE2, nlE2, nlB2, np.zeros(len(nlB2)))
hits1 = hp.read_map(hits_map1)
hits2 = hp.read_map(hits_map2)

# Read in diffuse signal simulations - used in Monte Carlo covariance estimation.
diffuse_signal_1 = hp.read_map(diffuse_map1, field=(0,1,2))
diffuse_signal_2 = hp.read_map(diffuse_map2, field=(0,1,2))

# Get mean field spectra.
cl_mean = ispice(mapin1=input_map1, mapfile2=input_map2, clout=f'{cl_mc_mean_out}_polSpice.txt',
                 nlmax=lmax, beam1=fwhm1, beam2=fwhm2, apodizetype=apodize_type, apodizesigma=apodize_scale, thetamax=theta_max, subav=subav,
                 subdipole=subdipole, polarization='YES', maskfile1=mask_file, maskfile2=mask_file)
print(f'cl_mean = {cl_mean}')
cl_BB_mean = b.bin_cell(np.array(cl_mean[3])) # Not sure if the np.array() is needed, check output shapes!
cl_EE_mean = b.bin_cell(np.array(cl_mean[2]))
cl_EB_mean = b.bin_cell(np.array(cl_mean[6]))

# Fiducial CMB power spectra used for CMB realisations.
fid_r0_lensed_filename = './fiducial_spectra/cmb_fiducial_r0_lensed.dat'
fid_r0p01_unlensed_filename = './fiducial_spectra/cmb_fiducial_r0p01_unlensed.dat'
theory_r = 0.0
theory_AL = 1.0

theory_ell = np.loadtxt(fid_r0_lensed_filename, usecols=0)
theory_dl_TT = np.loadtxt(fid_r0_lensed_filename, usecols=1)
theory_dl_EE = np.loadtxt(fid_r0_lensed_filename, usecols=2)
theory_dl_BB = np.loadtxt(fid_r0p01_unlensed_filename, usecols=3)
theory_dl_lens = np.loadtxt(fid_r0_lensed_filename, usecols=3)
theory_dl_TE = np.loadtxt(fid_r0_lensed_filename, usecols=4)

theory_cl_TT = 2 * np.pi * theory_dl_TT / (theory_ell * (theory_ell + 1))
theory_cl_EE = 2 * np.pi * theory_dl_EE / (theory_ell * (theory_ell + 1))
theory_cl_BB = 2 * np.pi * (theory_r * theory_dl_BB / 0.01 + theory_AL * theory_dl_lens) / (theory_ell * (theory_ell + 1))
theory_cl_TE = 2 * np.pi * theory_dl_TE / (theory_ell * (theory_ell + 1))

theory_cl_TT = np.insert(theory_cl_TT, 0, np.array([0, 0]))
theory_cl_EE = np.insert(theory_cl_EE, 0, np.array([0, 0]))
theory_cl_BB = np.insert(theory_cl_BB, 0, np.array([0, 0]))
theory_cl_TE = np.insert(theory_cl_TE, 0, np.array([0, 0]))

theory_spectra = (theory_cl_TT, theory_cl_EE, theory_cl_BB, theory_cl_TE)

for i in range(num_monte_carlo):

    print('Monte Carlo Sim {}/{}'.format(i + 1, num_monte_carlo))

    if not use_noise_model1:
        noise_realise_Q1 = np.random.normal(size=len(Qmap1)) * np.sqrt(Qcov1) * 1.05 # 5% calibration uncertainty for C-BASS
        noise_realise_U1 = np.random.normal(size=len(Umap1)) * np.sqrt(Ucov1) * 1.05
    elif use_noise_model1:
        noise_all1 = hp.synfast(nl1, nside, new=True)
        noise_realise_Q1 = noise_all1[1] / np.sqrt(hits1)
        noise_realise_U1 = noise_all1[2] / np.sqrt(hits1)
    if not use_noise_model2:
        noise_realise_Q2 = np.random.normal(size=len(Qmap2)) * np.sqrt(Qcov2) * 1.05
        noise_realise_U2 = np.random.normal(size=len(Umap2)) * np.sqrt(Ucov2) * 1.05
    elif use_noise_model2:
        noise_all2 = hp.synfast(nl2, nside, new=True)
        noise_realise_Q2 = noise_all2[1] / np.sqrt(hits2)
        noise_realise_U2 = noise_all2[2] / np.sqrt(hits2)
        
    cmb = hp.synfast(theory_spectra, nside, new=True) * 1e-6 # Fiducial CMB spectra are in uK^2
    #cmb = hp.synfast(theory_spectra, nside, new=True) # Try maps in micro-K.
    cmbI1, cmbQ1, cmbU1 = hp.smoothing(cmb, fwhm=np.radians(fwhm1 / 60))
    cmbI2, cmbQ2, cmbU2 = hp.smoothing(cmb, fwhm=np.radians(fwhm2 / 60))
    sn_realise_Q1 = noise_realise_Q1 + cmbQ1 + diffuse_signal_Q1
    sn_realise_U1 = noise_realise_U1 + cmbU1 + diffuse_signal_U1
    sn_realise_Q2 = noise_realise_Q2 + cmbQ2 + diffuse_signal_Q2
    sn_realise_U2 = noise_realise_U2 + cmbU2 + diffuse_signal_U2
    sn_realise_Q1[mask == 0] = 0
    sn_realise_U1[mask == 0] = 0
    sn_realise_Q2[mask == 0] = 0
    sn_realise_U2[mask == 0] = 0

    hp.write_map('snl1_mc_temp.fits', np.array([Imap1, sn_realise_Q1, sn_realise_U1]), overwrite=True)
    hp.write_map('snl2_mc_temp.fits', np.array([Imap2, sn_realise_Q2, sn_realise_U2]), overwrite=True)
    
    # Change this for PolSpice calculation!
    snl_mc = ispice(mapin1='./snl1_mc_temp.fits', mapfile2='./snl2_mc_temp.fits',
                    clout='snl_mc_temp_polSpice.txt', nlmax=lmax, beam1=fwhm1, beam2=fwhm2, apodizetype=apodize_type,
                    apodizesigma=apodize_scale, thetamax=theta_max, subav=subav, subdipole=subdipole, polarization='YES',
                    maskfile1=mask_file, maskfile2=mask_file)
    os.remove('./snl1_mc_temp.fits')
    os.remove('./snl2_mc_temp.fits')
    os.remove('snl_mc_temp_polSpice.txt')

    snl_BB_power.append(b.bin_cell(np.array(snl_mc[3])))
    snl_EE_power.append(b.bin_cell(np.array(snl_mc[2])))
    snl_EB_power.append(b.bin_cell(np.array(snl_mc[6])))

# Note - array indices still for NaMaster, remove this when fixed!
snl_BB_power = np.array(snl_BB_power)
snl_EE_power = np.array(snl_EE_power)
snl_EB_power = np.array(snl_EB_power)
cl_BB_std = np.std(snl_BB_power, axis=0)
cl_EE_std = np.std(snl_EE_power, axis=0)
cl_EB_std = np.std(snl_EB_power, axis=0)
nl_EE_EE_covar = np.cov(np.transpose(snl_EE_power))
nl_BB_BB_covar = np.cov(np.transpose(snl_BB_power))
nl_EB_EB_covar = np.cov(np.transpose(snl_EE_power), np.transpose(snl_BB_power))

print('Saving Monte Carlo output.')
np.savetxt(leff_out, leff)
np.savetxt(f'{cl_mc_std_out}_polSpice.txt', np.array([cl_EE_std, cl_BB_std, cl_EB_std]))
np.savetxt(f'{cl_mc_cov_EE_EE_out}_polSpice.txt', nl_EE_EE_covar)
np.savetxt(f'{cl_mc_cov_BB_BB_out}_polSpice.txt', nl_BB_BB_covar)
np.savetxt(f'{cl_mc_cov_EB_EB_out}_polSpice.txt', nl_EB_EB_covar)

print('Congratulations, you completed the power spectrum estimation!')
